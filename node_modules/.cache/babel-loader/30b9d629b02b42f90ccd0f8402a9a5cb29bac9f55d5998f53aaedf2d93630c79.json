{"ast":null,"code":"import { format, subWeeks, subMonths } from 'date-fns';\nexport const calculateStats = (readings, period = 'all') => {\n  if (readings.length === 0) {\n    return {\n      averageSystolic: 0,\n      averageDiastolic: 0,\n      averageHeartRate: 0,\n      minSystolic: 0,\n      maxSystolic: 0,\n      minDiastolic: 0,\n      maxDiastolic: 0,\n      totalReadings: 0,\n      period\n    };\n  }\n  const now = new Date();\n  let filteredReadings = readings;\n  if (period === 'week') {\n    const weekAgo = subWeeks(now, 1);\n    filteredReadings = readings.filter(r => r.timestamp >= weekAgo);\n  } else if (period === 'month') {\n    const monthAgo = subMonths(now, 1);\n    filteredReadings = readings.filter(r => r.timestamp >= monthAgo);\n  }\n  const systolicValues = filteredReadings.map(r => r.systolic);\n  const diastolicValues = filteredReadings.map(r => r.diastolic);\n  const heartRateValues = filteredReadings.map(r => r.heartRate);\n  return {\n    averageSystolic: Math.round(systolicValues.reduce((a, b) => a + b, 0) / systolicValues.length),\n    averageDiastolic: Math.round(diastolicValues.reduce((a, b) => a + b, 0) / diastolicValues.length),\n    averageHeartRate: Math.round(heartRateValues.reduce((a, b) => a + b, 0) / heartRateValues.length),\n    minSystolic: Math.min(...systolicValues),\n    maxSystolic: Math.max(...systolicValues),\n    minDiastolic: Math.min(...diastolicValues),\n    maxDiastolic: Math.max(...diastolicValues),\n    totalReadings: filteredReadings.length,\n    period\n  };\n};\nexport const analyzeTrends = readings => {\n  if (readings.length < 2) {\n    return {\n      systolicTrend: 'stable',\n      diastolicTrend: 'stable',\n      heartRateTrend: 'stable',\n      riskLevel: 'low',\n      recommendations: ['Continue monitoring your blood pressure regularly'],\n      insights: ['Not enough data for trend analysis. Keep logging readings!']\n    };\n  }\n\n  // Sort readings by date\n  const sortedReadings = [...readings].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n\n  // Calculate trends using simple linear regression\n  const systolicTrend = calculateTrend(sortedReadings.map(r => r.systolic));\n  const diastolicTrend = calculateTrend(sortedReadings.map(r => r.diastolic));\n  const heartRateTrend = calculateTrend(sortedReadings.map(r => r.heartRate));\n\n  // Determine risk level based on recent readings\n  const recentReadings = sortedReadings.slice(-7); // Last 7 readings\n  const avgSystolic = recentReadings.reduce((sum, r) => sum + r.systolic, 0) / recentReadings.length;\n  const avgDiastolic = recentReadings.reduce((sum, r) => sum + r.diastolic, 0) / recentReadings.length;\n  let riskLevel = 'low';\n  if (avgSystolic >= 140 || avgDiastolic >= 90) {\n    riskLevel = 'high';\n  } else if (avgSystolic >= 130 || avgDiastolic >= 80) {\n    riskLevel = 'moderate';\n  }\n  const recommendations = generateRecommendations(systolicTrend, diastolicTrend, heartRateTrend, riskLevel);\n  const insights = generateInsights(systolicTrend, diastolicTrend, heartRateTrend, avgSystolic, avgDiastolic);\n  return {\n    systolicTrend,\n    diastolicTrend,\n    heartRateTrend,\n    riskLevel,\n    recommendations,\n    insights\n  };\n};\nconst calculateTrend = values => {\n  if (values.length < 2) return 'stable';\n  const n = values.length;\n  const x = Array.from({\n    length: n\n  }, (_, i) => i);\n  const y = values;\n  const sumX = x.reduce((a, b) => a + b, 0);\n  const sumY = y.reduce((a, b) => a + b, 0);\n  const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n  const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n  const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n  if (Math.abs(slope) < 0.5) return 'stable';\n  return slope > 0 ? 'increasing' : 'decreasing';\n};\nconst generateRecommendations = (systolicTrend, diastolicTrend, heartRateTrend, riskLevel) => {\n  const recommendations = [];\n  if (riskLevel === 'high') {\n    recommendations.push('Consider consulting with a healthcare provider about your blood pressure');\n    recommendations.push('Monitor your blood pressure more frequently');\n  }\n  if (systolicTrend === 'increasing' || diastolicTrend === 'increasing') {\n    recommendations.push('Consider lifestyle changes like reducing sodium intake and increasing exercise');\n  }\n  if (heartRateTrend === 'increasing') {\n    recommendations.push('Consider stress management techniques and regular cardiovascular exercise');\n  }\n  if (systolicTrend === 'stable' && diastolicTrend === 'stable') {\n    recommendations.push('Great job maintaining stable blood pressure!');\n  }\n  if (recommendations.length === 0) {\n    recommendations.push('Continue monitoring your blood pressure regularly');\n  }\n  return recommendations;\n};\nconst generateInsights = (systolicTrend, diastolicTrend, heartRateTrend, avgSystolic, avgDiastolic) => {\n  const insights = [];\n\n  // Blood pressure category insights\n  if (avgSystolic < 120 && avgDiastolic < 80) {\n    insights.push('Your blood pressure is in the normal range - excellent!');\n  } else if (avgSystolic < 130 && avgDiastolic < 80) {\n    insights.push('Your blood pressure is elevated but not in the high range');\n  } else if (avgSystolic < 140 && avgDiastolic < 90) {\n    insights.push('Your blood pressure is in Stage 1 hypertension range');\n  } else {\n    insights.push('Your blood pressure is in Stage 2 hypertension range');\n  }\n\n  // Trend insights\n  if (systolicTrend === 'decreasing' && diastolicTrend === 'decreasing') {\n    insights.push('Both systolic and diastolic pressures are trending downward - positive progress!');\n  } else if (systolicTrend === 'increasing' && diastolicTrend === 'increasing') {\n    insights.push('Both pressures are trending upward - consider lifestyle modifications');\n  }\n  if (heartRateTrend === 'decreasing') {\n    insights.push('Your heart rate is trending downward, which may indicate improved cardiovascular fitness');\n  } else if (heartRateTrend === 'increasing') {\n    insights.push('Your heart rate is trending upward - consider stress management and regular exercise');\n  }\n  return insights;\n};\nexport const prepareChartData = readings => {\n  return readings.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime()).map(reading => ({\n    date: format(reading.timestamp, 'MMM dd'),\n    systolic: reading.systolic,\n    diastolic: reading.diastolic,\n    heartRate: reading.heartRate,\n    timestamp: reading.timestamp.getTime()\n  }));\n};","map":{"version":3,"names":["format","subWeeks","subMonths","calculateStats","readings","period","length","averageSystolic","averageDiastolic","averageHeartRate","minSystolic","maxSystolic","minDiastolic","maxDiastolic","totalReadings","now","Date","filteredReadings","weekAgo","filter","r","timestamp","monthAgo","systolicValues","map","systolic","diastolicValues","diastolic","heartRateValues","heartRate","Math","round","reduce","a","b","min","max","analyzeTrends","systolicTrend","diastolicTrend","heartRateTrend","riskLevel","recommendations","insights","sortedReadings","sort","getTime","calculateTrend","recentReadings","slice","avgSystolic","sum","avgDiastolic","generateRecommendations","generateInsights","values","n","x","Array","from","_","i","y","sumX","sumY","sumXY","xi","sumXX","slope","abs","push","prepareChartData","reading","date"],"sources":["/home/rnkin/projects/bloodpressure-log-app/src/utils/analysis.ts"],"sourcesContent":["import { BloodPressureReading, TrendAnalysis, BloodPressureStats, ChartDataPoint } from '../types';\r\nimport { format, subDays, subWeeks, subMonths } from 'date-fns';\r\n\r\nexport const calculateStats = (readings: BloodPressureReading[], period: 'week' | 'month' | 'all' = 'all'): BloodPressureStats => {\r\n  if (readings.length === 0) {\r\n    return {\r\n      averageSystolic: 0,\r\n      averageDiastolic: 0,\r\n      averageHeartRate: 0,\r\n      minSystolic: 0,\r\n      maxSystolic: 0,\r\n      minDiastolic: 0,\r\n      maxDiastolic: 0,\r\n      totalReadings: 0,\r\n      period\r\n    };\r\n  }\r\n\r\n  const now = new Date();\r\n  let filteredReadings = readings;\r\n\r\n  if (period === 'week') {\r\n    const weekAgo = subWeeks(now, 1);\r\n    filteredReadings = readings.filter(r => r.timestamp >= weekAgo);\r\n  } else if (period === 'month') {\r\n    const monthAgo = subMonths(now, 1);\r\n    filteredReadings = readings.filter(r => r.timestamp >= monthAgo);\r\n  }\r\n\r\n  const systolicValues = filteredReadings.map(r => r.systolic);\r\n  const diastolicValues = filteredReadings.map(r => r.diastolic);\r\n  const heartRateValues = filteredReadings.map(r => r.heartRate);\r\n\r\n  return {\r\n    averageSystolic: Math.round(systolicValues.reduce((a, b) => a + b, 0) / systolicValues.length),\r\n    averageDiastolic: Math.round(diastolicValues.reduce((a, b) => a + b, 0) / diastolicValues.length),\r\n    averageHeartRate: Math.round(heartRateValues.reduce((a, b) => a + b, 0) / heartRateValues.length),\r\n    minSystolic: Math.min(...systolicValues),\r\n    maxSystolic: Math.max(...systolicValues),\r\n    minDiastolic: Math.min(...diastolicValues),\r\n    maxDiastolic: Math.max(...diastolicValues),\r\n    totalReadings: filteredReadings.length,\r\n    period\r\n  };\r\n};\r\n\r\nexport const analyzeTrends = (readings: BloodPressureReading[]): TrendAnalysis => {\r\n  if (readings.length < 2) {\r\n    return {\r\n      systolicTrend: 'stable',\r\n      diastolicTrend: 'stable',\r\n      heartRateTrend: 'stable',\r\n      riskLevel: 'low',\r\n      recommendations: ['Continue monitoring your blood pressure regularly'],\r\n      insights: ['Not enough data for trend analysis. Keep logging readings!']\r\n    };\r\n  }\r\n\r\n  // Sort readings by date\r\n  const sortedReadings = [...readings].sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\r\n  \r\n  // Calculate trends using simple linear regression\r\n  const systolicTrend = calculateTrend(sortedReadings.map(r => r.systolic));\r\n  const diastolicTrend = calculateTrend(sortedReadings.map(r => r.diastolic));\r\n  const heartRateTrend = calculateTrend(sortedReadings.map(r => r.heartRate));\r\n\r\n  // Determine risk level based on recent readings\r\n  const recentReadings = sortedReadings.slice(-7); // Last 7 readings\r\n  const avgSystolic = recentReadings.reduce((sum, r) => sum + r.systolic, 0) / recentReadings.length;\r\n  const avgDiastolic = recentReadings.reduce((sum, r) => sum + r.diastolic, 0) / recentReadings.length;\r\n\r\n  let riskLevel: 'low' | 'moderate' | 'high' = 'low';\r\n  if (avgSystolic >= 140 || avgDiastolic >= 90) {\r\n    riskLevel = 'high';\r\n  } else if (avgSystolic >= 130 || avgDiastolic >= 80) {\r\n    riskLevel = 'moderate';\r\n  }\r\n\r\n  const recommendations = generateRecommendations(systolicTrend, diastolicTrend, heartRateTrend, riskLevel);\r\n  const insights = generateInsights(systolicTrend, diastolicTrend, heartRateTrend, avgSystolic, avgDiastolic);\r\n\r\n  return {\r\n    systolicTrend,\r\n    diastolicTrend,\r\n    heartRateTrend,\r\n    riskLevel,\r\n    recommendations,\r\n    insights\r\n  };\r\n};\r\n\r\nconst calculateTrend = (values: number[]): 'increasing' | 'decreasing' | 'stable' => {\r\n  if (values.length < 2) return 'stable';\r\n  \r\n  const n = values.length;\r\n  const x = Array.from({ length: n }, (_, i) => i);\r\n  const y = values;\r\n  \r\n  const sumX = x.reduce((a, b) => a + b, 0);\r\n  const sumY = y.reduce((a, b) => a + b, 0);\r\n  const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\r\n  const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\r\n  \r\n  const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n  \r\n  if (Math.abs(slope) < 0.5) return 'stable';\r\n  return slope > 0 ? 'increasing' : 'decreasing';\r\n};\r\n\r\nconst generateRecommendations = (\r\n  systolicTrend: string,\r\n  diastolicTrend: string,\r\n  heartRateTrend: string,\r\n  riskLevel: string\r\n): string[] => {\r\n  const recommendations: string[] = [];\r\n  \r\n  if (riskLevel === 'high') {\r\n    recommendations.push('Consider consulting with a healthcare provider about your blood pressure');\r\n    recommendations.push('Monitor your blood pressure more frequently');\r\n  }\r\n  \r\n  if (systolicTrend === 'increasing' || diastolicTrend === 'increasing') {\r\n    recommendations.push('Consider lifestyle changes like reducing sodium intake and increasing exercise');\r\n  }\r\n  \r\n  if (heartRateTrend === 'increasing') {\r\n    recommendations.push('Consider stress management techniques and regular cardiovascular exercise');\r\n  }\r\n  \r\n  if (systolicTrend === 'stable' && diastolicTrend === 'stable') {\r\n    recommendations.push('Great job maintaining stable blood pressure!');\r\n  }\r\n  \r\n  if (recommendations.length === 0) {\r\n    recommendations.push('Continue monitoring your blood pressure regularly');\r\n  }\r\n  \r\n  return recommendations;\r\n};\r\n\r\nconst generateInsights = (\r\n  systolicTrend: string,\r\n  diastolicTrend: string,\r\n  heartRateTrend: string,\r\n  avgSystolic: number,\r\n  avgDiastolic: number\r\n): string[] => {\r\n  const insights: string[] = [];\r\n  \r\n  // Blood pressure category insights\r\n  if (avgSystolic < 120 && avgDiastolic < 80) {\r\n    insights.push('Your blood pressure is in the normal range - excellent!');\r\n  } else if (avgSystolic < 130 && avgDiastolic < 80) {\r\n    insights.push('Your blood pressure is elevated but not in the high range');\r\n  } else if (avgSystolic < 140 && avgDiastolic < 90) {\r\n    insights.push('Your blood pressure is in Stage 1 hypertension range');\r\n  } else {\r\n    insights.push('Your blood pressure is in Stage 2 hypertension range');\r\n  }\r\n  \r\n  // Trend insights\r\n  if (systolicTrend === 'decreasing' && diastolicTrend === 'decreasing') {\r\n    insights.push('Both systolic and diastolic pressures are trending downward - positive progress!');\r\n  } else if (systolicTrend === 'increasing' && diastolicTrend === 'increasing') {\r\n    insights.push('Both pressures are trending upward - consider lifestyle modifications');\r\n  }\r\n  \r\n  if (heartRateTrend === 'decreasing') {\r\n    insights.push('Your heart rate is trending downward, which may indicate improved cardiovascular fitness');\r\n  } else if (heartRateTrend === 'increasing') {\r\n    insights.push('Your heart rate is trending upward - consider stress management and regular exercise');\r\n  }\r\n  \r\n  return insights;\r\n};\r\n\r\nexport const prepareChartData = (readings: BloodPressureReading[]): ChartDataPoint[] => {\r\n  return readings\r\n    .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime())\r\n    .map(reading => ({\r\n      date: format(reading.timestamp, 'MMM dd'),\r\n      systolic: reading.systolic,\r\n      diastolic: reading.diastolic,\r\n      heartRate: reading.heartRate,\r\n      timestamp: reading.timestamp.getTime()\r\n    }));\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}