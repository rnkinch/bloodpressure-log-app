{"ast":null,"code":"/**\r\n * Utility functions for handling timezone conversions\r\n */\n\n/**\r\n * Converts a Date object to a local datetime-local input value\r\n * This ensures the datetime-local input shows the correct local time\r\n */\nexport const toLocalDateTimeString = date => {\n  const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\n  return localDate.toISOString().slice(0, 16);\n};\n\n/**\r\n * Converts a local datetime-local input value back to a Date object\r\n * This ensures the Date object represents the correct local time\r\n */\nexport const fromLocalDateTimeString = localDateTimeString => {\n  return new Date(localDateTimeString);\n};\n\n/**\r\n * Gets the current local time as a datetime-local input value\r\n */\nexport const getCurrentLocalDateTime = () => {\n  return toLocalDateTimeString(new Date());\n};\n\n/**\r\n * Formats a date for display in charts, respecting local timezone\r\n */\nexport const formatForDisplay = date => {\n  const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\n  return localDate.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};","map":{"version":3,"names":["toLocalDateTimeString","date","localDate","Date","getTime","getTimezoneOffset","toISOString","slice","fromLocalDateTimeString","localDateTimeString","getCurrentLocalDateTime","formatForDisplay","toLocaleDateString","month","day","hour","minute"],"sources":["/home/rnkin/projects/bloodpressure-log-app/src/utils/timezone.ts"],"sourcesContent":["/**\r\n * Utility functions for handling timezone conversions\r\n */\r\n\r\n/**\r\n * Converts a Date object to a local datetime-local input value\r\n * This ensures the datetime-local input shows the correct local time\r\n */\r\nexport const toLocalDateTimeString = (date: Date): string => {\r\n  const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\r\n  return localDate.toISOString().slice(0, 16);\r\n};\r\n\r\n/**\r\n * Converts a local datetime-local input value back to a Date object\r\n * This ensures the Date object represents the correct local time\r\n */\r\nexport const fromLocalDateTimeString = (localDateTimeString: string): Date => {\r\n  return new Date(localDateTimeString);\r\n};\r\n\r\n/**\r\n * Gets the current local time as a datetime-local input value\r\n */\r\nexport const getCurrentLocalDateTime = (): string => {\r\n  return toLocalDateTimeString(new Date());\r\n};\r\n\r\n/**\r\n * Formats a date for display in charts, respecting local timezone\r\n */\r\nexport const formatForDisplay = (date: Date): string => {\r\n  const localDate = new Date(date.getTime() - date.getTimezoneOffset() * 60000);\r\n  return localDate.toLocaleDateString('en-US', { \r\n    month: 'short', \r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,qBAAqB,GAAIC,IAAU,IAAa;EAC3D,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,GAAGH,IAAI,CAACI,iBAAiB,CAAC,CAAC,GAAG,KAAK,CAAC;EAC7E,OAAOH,SAAS,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAIC,mBAA2B,IAAW;EAC5E,OAAO,IAAIN,IAAI,CAACM,mBAAmB,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,KAAc;EACnD,OAAOV,qBAAqB,CAAC,IAAIG,IAAI,CAAC,CAAC,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMQ,gBAAgB,GAAIV,IAAU,IAAa;EACtD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,GAAGH,IAAI,CAACI,iBAAiB,CAAC,CAAC,GAAG,KAAK,CAAC;EAC7E,OAAOH,SAAS,CAACU,kBAAkB,CAAC,OAAO,EAAE;IAC3CC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}