{"ast":null,"code":"const STORAGE_KEY = 'bloodPressureReadings';\nexport const saveReadings = readings => {\n  try {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(readings));\n  } catch (error) {\n    console.error('Failed to save readings to localStorage:', error);\n  }\n};\nexport const loadReadings = () => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      const readings = JSON.parse(stored);\n      // Convert timestamp strings back to Date objects\n      return readings.map(reading => ({\n        ...reading,\n        timestamp: new Date(reading.timestamp)\n      }));\n    }\n  } catch (error) {\n    console.error('Failed to load readings from localStorage:', error);\n  }\n  return [];\n};\nexport const addReading = reading => {\n  const readings = loadReadings();\n  const newReading = {\n    ...reading,\n    id: Date.now().toString() + Math.random().toString(36).substr(2, 9)\n  };\n  const updatedReadings = [...readings, newReading];\n  saveReadings(updatedReadings);\n  return newReading;\n};\nexport const deleteReading = id => {\n  const readings = loadReadings();\n  const updatedReadings = readings.filter(reading => reading.id !== id);\n  saveReadings(updatedReadings);\n};\nexport const updateReading = (id, updates) => {\n  const readings = loadReadings();\n  const updatedReadings = readings.map(reading => reading.id === id ? {\n    ...reading,\n    ...updates\n  } : reading);\n  saveReadings(updatedReadings);\n};","map":{"version":3,"names":["STORAGE_KEY","saveReadings","readings","localStorage","setItem","JSON","stringify","error","console","loadReadings","stored","getItem","parse","map","reading","timestamp","Date","addReading","newReading","id","now","toString","Math","random","substr","updatedReadings","deleteReading","filter","updateReading","updates"],"sources":["/home/rnkin/projects/bloodpressure-log-app/src/utils/storage.ts"],"sourcesContent":["import { BloodPressureReading } from '../types';\r\n\r\nconst STORAGE_KEY = 'bloodPressureReadings';\r\n\r\nexport const saveReadings = (readings: BloodPressureReading[]): void => {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(readings));\r\n  } catch (error) {\r\n    console.error('Failed to save readings to localStorage:', error);\r\n  }\r\n};\r\n\r\nexport const loadReadings = (): BloodPressureReading[] => {\r\n  try {\r\n    const stored = localStorage.getItem(STORAGE_KEY);\r\n    if (stored) {\r\n      const readings = JSON.parse(stored);\r\n      // Convert timestamp strings back to Date objects\r\n      return readings.map((reading: any) => ({\r\n        ...reading,\r\n        timestamp: new Date(reading.timestamp)\r\n      }));\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to load readings from localStorage:', error);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const addReading = (reading: Omit<BloodPressureReading, 'id'>): BloodPressureReading => {\r\n  const readings = loadReadings();\r\n  const newReading: BloodPressureReading = {\r\n    ...reading,\r\n    id: Date.now().toString() + Math.random().toString(36).substr(2, 9)\r\n  };\r\n  const updatedReadings = [...readings, newReading];\r\n  saveReadings(updatedReadings);\r\n  return newReading;\r\n};\r\n\r\nexport const deleteReading = (id: string): void => {\r\n  const readings = loadReadings();\r\n  const updatedReadings = readings.filter(reading => reading.id !== id);\r\n  saveReadings(updatedReadings);\r\n};\r\n\r\nexport const updateReading = (id: string, updates: Partial<BloodPressureReading>): void => {\r\n  const readings = loadReadings();\r\n  const updatedReadings = readings.map(reading => \r\n    reading.id === id ? { ...reading, ...updates } : reading\r\n  );\r\n  saveReadings(updatedReadings);\r\n};\r\n"],"mappings":"AAEA,MAAMA,WAAW,GAAG,uBAAuB;AAE3C,OAAO,MAAMC,YAAY,GAAIC,QAAgC,IAAW;EACtE,IAAI;IACFC,YAAY,CAACC,OAAO,CAACJ,WAAW,EAAEK,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;EAClE;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAGA,CAAA,KAA8B;EACxD,IAAI;IACF,MAAMC,MAAM,GAAGP,YAAY,CAACQ,OAAO,CAACX,WAAW,CAAC;IAChD,IAAIU,MAAM,EAAE;MACV,MAAMR,QAAQ,GAAGG,IAAI,CAACO,KAAK,CAACF,MAAM,CAAC;MACnC;MACA,OAAOR,QAAQ,CAACW,GAAG,CAAEC,OAAY,KAAM;QACrC,GAAGA,OAAO;QACVC,SAAS,EAAE,IAAIC,IAAI,CAACF,OAAO,CAACC,SAAS;MACvC,CAAC,CAAC,CAAC;IACL;EACF,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;EACpE;EACA,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMU,UAAU,GAAIH,OAAyC,IAA2B;EAC7F,MAAMZ,QAAQ,GAAGO,YAAY,CAAC,CAAC;EAC/B,MAAMS,UAAgC,GAAG;IACvC,GAAGJ,OAAO;IACVK,EAAE,EAAEH,IAAI,CAACI,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,EAAE,CAAC,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC;EACpE,CAAC;EACD,MAAMC,eAAe,GAAG,CAAC,GAAGvB,QAAQ,EAAEgB,UAAU,CAAC;EACjDjB,YAAY,CAACwB,eAAe,CAAC;EAC7B,OAAOP,UAAU;AACnB,CAAC;AAED,OAAO,MAAMQ,aAAa,GAAIP,EAAU,IAAW;EACjD,MAAMjB,QAAQ,GAAGO,YAAY,CAAC,CAAC;EAC/B,MAAMgB,eAAe,GAAGvB,QAAQ,CAACyB,MAAM,CAACb,OAAO,IAAIA,OAAO,CAACK,EAAE,KAAKA,EAAE,CAAC;EACrElB,YAAY,CAACwB,eAAe,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMG,aAAa,GAAGA,CAACT,EAAU,EAAEU,OAAsC,KAAW;EACzF,MAAM3B,QAAQ,GAAGO,YAAY,CAAC,CAAC;EAC/B,MAAMgB,eAAe,GAAGvB,QAAQ,CAACW,GAAG,CAACC,OAAO,IAC1CA,OAAO,CAACK,EAAE,KAAKA,EAAE,GAAG;IAAE,GAAGL,OAAO;IAAE,GAAGe;EAAQ,CAAC,GAAGf,OACnD,CAAC;EACDb,YAAY,CAACwB,eAAe,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}