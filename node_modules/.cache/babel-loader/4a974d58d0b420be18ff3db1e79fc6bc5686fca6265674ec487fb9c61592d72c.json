{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { loadReadings, addReading, deleteReading, updateReading } from '../utils/storage';\nexport const useBloodPressureData = () => {\n  _s();\n  const [readings, setReadings] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Load readings from localStorage on mount\n  useEffect(() => {\n    const loadedReadings = loadReadings();\n    setReadings(loadedReadings);\n    setLoading(false);\n  }, []);\n\n  // Save readings to localStorage whenever readings change\n  useEffect(() => {\n    if (!loading) {\n      localStorage.setItem('bloodPressureReadings', JSON.stringify(readings));\n    }\n  }, [readings, loading]);\n  const addNewReading = useCallback(reading => {\n    const newReading = addReading(reading);\n    setReadings(prev => [...prev, newReading]);\n    return newReading;\n  }, []);\n  const removeReading = useCallback(id => {\n    deleteReading(id);\n    setReadings(prev => prev.filter(reading => reading.id !== id));\n  }, []);\n  const editReading = useCallback((id, updates) => {\n    updateReading(id, updates);\n    setReadings(prev => prev.map(reading => reading.id === id ? {\n      ...reading,\n      ...updates\n    } : reading));\n  }, []);\n  return {\n    readings,\n    loading,\n    addReading: addNewReading,\n    deleteReading: removeReading,\n    updateReading: editReading\n  };\n};\n_s(useBloodPressureData, \"61n1jpSAfl0GQfatJSKvO2cIVjA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","loadReadings","addReading","deleteReading","updateReading","useBloodPressureData","_s","readings","setReadings","loading","setLoading","loadedReadings","localStorage","setItem","JSON","stringify","addNewReading","reading","newReading","prev","removeReading","id","filter","editReading","updates","map"],"sources":["/home/rnkin/projects/bloodpressure-log-app/src/hooks/useBloodPressureData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { BloodPressureReading } from '../types';\r\nimport { loadReadings, addReading, deleteReading, updateReading } from '../utils/storage';\r\n\r\nexport const useBloodPressureData = () => {\r\n  const [readings, setReadings] = useState<BloodPressureReading[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load readings from localStorage on mount\r\n  useEffect(() => {\r\n    const loadedReadings = loadReadings();\r\n    setReadings(loadedReadings);\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Save readings to localStorage whenever readings change\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      localStorage.setItem('bloodPressureReadings', JSON.stringify(readings));\r\n    }\r\n  }, [readings, loading]);\r\n\r\n  const addNewReading = useCallback((reading: Omit<BloodPressureReading, 'id'>) => {\r\n    const newReading = addReading(reading);\r\n    setReadings(prev => [...prev, newReading]);\r\n    return newReading;\r\n  }, []);\r\n\r\n  const removeReading = useCallback((id: string) => {\r\n    deleteReading(id);\r\n    setReadings(prev => prev.filter(reading => reading.id !== id));\r\n  }, []);\r\n\r\n  const editReading = useCallback((id: string, updates: Partial<BloodPressureReading>) => {\r\n    updateReading(id, updates);\r\n    setReadings(prev => \r\n      prev.map(reading => \r\n        reading.id === id ? { ...reading, ...updates } : reading\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  return {\r\n    readings,\r\n    loading,\r\n    addReading: addNewReading,\r\n    deleteReading: removeReading,\r\n    updateReading: editReading\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAExD,SAASC,YAAY,EAAEC,UAAU,EAAEC,aAAa,EAAEC,aAAa,QAAQ,kBAAkB;AAEzF,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAyB,EAAE,CAAC;EACpE,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,cAAc,GAAGV,YAAY,CAAC,CAAC;IACrCO,WAAW,CAACG,cAAc,CAAC;IAC3BD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAX,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,OAAO,EAAE;MACZG,YAAY,CAACC,OAAO,CAAC,uBAAuB,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,CAAC;IACzE;EACF,CAAC,EAAE,CAACA,QAAQ,EAAEE,OAAO,CAAC,CAAC;EAEvB,MAAMO,aAAa,GAAGhB,WAAW,CAAEiB,OAAyC,IAAK;IAC/E,MAAMC,UAAU,GAAGhB,UAAU,CAACe,OAAO,CAAC;IACtCT,WAAW,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,UAAU,CAAC,CAAC;IAC1C,OAAOA,UAAU;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,aAAa,GAAGpB,WAAW,CAAEqB,EAAU,IAAK;IAChDlB,aAAa,CAACkB,EAAE,CAAC;IACjBb,WAAW,CAACW,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACL,OAAO,IAAIA,OAAO,CAACI,EAAE,KAAKA,EAAE,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,WAAW,GAAGvB,WAAW,CAAC,CAACqB,EAAU,EAAEG,OAAsC,KAAK;IACtFpB,aAAa,CAACiB,EAAE,EAAEG,OAAO,CAAC;IAC1BhB,WAAW,CAACW,IAAI,IACdA,IAAI,CAACM,GAAG,CAACR,OAAO,IACdA,OAAO,CAACI,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGJ,OAAO;MAAE,GAAGO;IAAQ,CAAC,GAAGP,OACnD,CACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLV,QAAQ;IACRE,OAAO;IACPP,UAAU,EAAEc,aAAa;IACzBb,aAAa,EAAEiB,aAAa;IAC5BhB,aAAa,EAAEmB;EACjB,CAAC;AACH,CAAC;AAACjB,EAAA,CA7CWD,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}